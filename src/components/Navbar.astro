---
import { type Navbar } from "@interfaces/navbar";
import BannerCta from "@components/BannerCta.astro";
import { getLangFromUrl } from "@i18n/utils";
import { getNavbarData } from "@utils/contentful_utils";
import LanguageButton from "@components/LanguageButton.astro";

if (!process.env.NAVBAR_ID) {
    throw new Error("CONTENTFUL_NAVBAR_ID is not defined");
}

const lang = getLangFromUrl(Astro.url);
const { logoUrl, cta, navDict } = await getNavbarData(
    process.env.NAVBAR_ID as string,
    lang
);
---

<head>
    <link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
        integrity="sha384-4LISF5TTJX/fLmGSxO53rV4miRxdg84mZsxmO8Rx5jGtp/LbrixFETvWa5a6sESd"
        crossorigin="anonymous"
    />
</head>

<nav class="navbar">
    <a href={`/${lang}/home`}>
        <img class="header_logo" src={logoUrl} alt="IntelDocs Logo" />
    </a>
    <ul class="navbar-list">
        {
            Object.keys(navDict).map((category) => (
                <li class="dropdown-container">
                    <button class="dropdown-trigger">
                        {category.charAt(0).toUpperCase() + category.slice(1)}
                        <i class="bi bi-chevron-down" />
                    </button>
                    <div class="dropdown">
                        {Object.keys(navDict[category]).map((subCategory) => (
                            <div class="dropdown-column">
                                <h4>
                                    {subCategory
                                        .replace(/_/g, " ")
                                        .replace(/\b\w/g, (c) =>
                                            c.toUpperCase()
                                        )}
                                </h4>
                                {Object.keys(
                                    navDict[category][subCategory]
                                ).map((item) => (
                                    <a
                                        href={
                                            navDict[category][subCategory][item]
                                        }
                                        class="inner-link"
                                        data-dropdown-link
                                    >
                                        {item
                                            .replace(/-/g, " ")
                                            .replace(/\b\w/g, (c) =>
                                                c.toUpperCase()
                                            )}
                                    </a>
                                ))}
                            </div>
                        ))}
                    </div>
                </li>
            ))
        }
    </ul>
    <div class="navbar-buttons">
        {
            cta?.fields && (
                <BannerCta data={cta} key={1} css_class="navbar-button" />
            )
        }
        <LanguageButton color="white" />
    </div>
</nav>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Manage dropdown toggling
        const dropdownTriggers = document.querySelectorAll(".dropdown-trigger");
        const dropdownLinks = document.querySelectorAll("[data-dropdown-link]");
        const dropdowns = document.querySelectorAll(".dropdown");

        dropdownTriggers.forEach((trigger) => {
            const parent = trigger.closest(".dropdown-container");
            if (!parent) return;
            const dropdown = parent.querySelector(".dropdown");

            trigger.addEventListener("click", (event) => {
                event.stopPropagation();
                if (!dropdown) return;
                dropdowns.forEach((d) => {
                    if (d !== dropdown) {
                        (d as HTMLElement).style.display = "none";
                    }
                });
                (dropdown as HTMLElement).style.display =
                    (dropdown as HTMLElement).style.display === "flex"
                        ? "none"
                        : "flex";
            });
        });

        dropdownLinks.forEach((link) => {
            link.addEventListener("click", (event) => {
                dropdowns.forEach((dropdown) => {
                    (dropdown as HTMLElement).style.display = "none";
                });
            });
        });

        document.addEventListener("click", (event) => {
            if (
                event.target &&
                !(event.target as Element).closest(".dropdown-container")
            ) {
                dropdowns.forEach((dropdown) => {
                    (dropdown as HTMLElement).style.display = "none";
                });
            }
        });
    });
</script>

<style>
    .header_logo {
        width: 200px;
        height: auto;
    }
    /* General Styles */
    .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: white;
        padding: 1rem 2rem;
        position: sticky;
        top: 0;
        z-index: 10;
        width: 80%;
    }

    .navbar-list {
        display: flex;
        list-style: none;
        margin: 0;
        padding: 0;
        gap: 3rem; /* Increased gap between navbar items */
    }

    .navbar-list li {
        position: relative;
    }

    .navbar-buttons {
        display: flex;
        gap: 1rem;
    }

    .navbar-button {
        background-color: var(
            --primaryColorOne
        ); /* Changed color to use CSS variable */
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        font-size: 1rem;
        text-decoration: none;
    }

    .navbar-button:hover {
        background-color: #0056b3;
    }

    /* Dropdown Styles */
    .dropdown-container {
        position: relative;
    }

    .dropdown-trigger {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #333;
        font-weight: bold;
    }

    .dropdown-trigger:hover {
        color: var(--primaryColorOne); /* Changed color to use CSS variable */
    }

    .bi-chevron-down {
        font-size: 0.8rem;
        transition: transform 0.3s ease;
    }

    .dropdown-container
        .dropdown-trigger[aria-expanded="true"]
        .bi-chevron-down {
        transform: rotate(180deg);
    }

    /* Dropdown Menu */
    .dropdown {
        display: none;
        position: absolute;
        top: 110%;
        left: 0;
        background: #ffffff;
        border: 1px solid #e0e0e0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 0.5rem;
        min-width: 14rem;
        padding: 1.5rem;
        z-index: 1000;
        animation: fadeIn 0.3s ease-in-out;
        gap: 2rem;
    }

    .dropdown-column {
        flex: 1;
        min-width: 12rem;
    }

    .dropdown-column:last-child {
        margin-bottom: 0;
    }

    .dropdown h4 {
        margin: 0;
        font-size: 1.1rem; /* Increased font size */
        font-weight: 700; /* Increased font weight */
        color: var(--primaryColorOne); /* Changed color to use CSS variable */
        margin-bottom: 1rem; /* Increased margin-bottom */
        text-transform: capitalize;
        white-space: nowrap; /* Prevent text wrapping */
    }

    /* Links in Dropdown */
    .dropdown a {
        text-decoration: none;
        color: #333;
        font-size: 1rem; /* Increased font size */
        padding: 0.75rem; /* Increased padding */
        display: block;
        border-radius: 0.25rem;
        transition:
            background-color 0.3s ease,
            color 0.3s ease;
    }

    .dropdown a:hover {
        background-color: #e9f3fd;
        color: var(--primaryColorOne); /* Changed color to use CSS variable */
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .navbar {
            flex-direction: column;
            align-items: flex-start;
            padding: 1rem;
        }

        .navbar-list {
            flex-direction: column;
            gap: 1rem;
            width: 100%;
        }

        .dropdown {
            min-width: auto;
            width: 100%;
        }
    }

    @media (min-width: 769px) {
        .navbar {
            display: flex;
        }
    }
    @media (max-width: 768px) {
        .navbar {
            display: none;
        }
    }

    /* Animations */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
